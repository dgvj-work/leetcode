"""
simple case if the curr becomes less than 0 we dont want to include that in the answer. 
second case is if there was no positive number than we have to take the max -ve number as the ans as that will be the longest max sum subarray.
"""

class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        curr = 0
        res = -sys.maxsize
        minnum = -sys.maxsize
        fl = False

        for i in range(len(nums)):
            curr+= nums[i]
            if curr < 0:
                curr = 0
            else:
                fl = True
            res = max(res, curr, nums[i])
            minnum = max(minnum, nums[i])
        
        if not fl:
            return minnum
        return res

